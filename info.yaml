--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID
  source_files:        # If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. Source files must be in ./src
    - stroucki_top.sv
    - lfsr.v
    - game.sv
#    - counter.v
#    - decoder.v
  top_module:  "stroucki_top"      # put the name of your top module here, make it unique by prepending your github username

# keep a track of the submission yaml
yaml_version: 2.1

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it.
#
# Here is an example: https://github.com/mattvenn/tinytapeout_m_segments/blob/main/info.yaml
#
# This info will be automatically collected and used to make a datasheet for the chip.
documentation: 
  author:       "Michael Stroucken"      # Your name
  discord:      ""
  # "stroucki"      # Your discord handle
  title:        "Corral"      # Project title
  description:  "Implements the Corral game from Basic Computer Games vol 2"      # Short description of what your project does
  how_it_works: "It has a constrained front end because of the few IO ports available."      # Longer description of how the project works
  how_to_test:  "Submit values from 1 to 5 in move and assert enter when game asserts ready"      # Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  external_hw:  "Something to expand the constrained outut data"      # Describe any external hardware needed
  language:     "SystemVerilog" # other examples include Verilog, Amaranth, VHDL, etc
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     0       # Clock frequency in Hz (if required) we are expecting max clock frequency to be ~6khz. Provided on input 0.
  picture:      ""      # relative path to a picture in your repository
  inputs:               # a description of what the inputs do
    - clock
    - reset
    - move0             # bit 0 of move
    - move1             # bit 1 of move
    - move2             # bit 2 of move
    - enter             # submit move
    - none
    - none
  outputs:
    - data0         # bit 0 of game data
    - data1         # bit 1 of game data
    - data2         # bit 2 of game data
    - data3         # bit 3 of game data
    - gameover      # high if game over
    - lostwon       # if game over, then high if won, low if lost
    - ready         # high if game is ready for next move
    - none

